#pragma max_recursion_depth 2

#pragma only_renderers d3d11

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Sampling/Sampling.hlsl"

#include "./RayTrace.hlsl"
// Output(s)
RW_TEXTURE2D(float4, _output);

[shader("miss")]
void EmptyMiss(inout Hit payload : SV_RayPayload)
{
     payload.instanceID = -1;
}
RaytracingAccelerationStructure gRtScene;
float4x4 _PixelCoordToViewDirWS;
float3 _WorldSpaceCameraPos;
[shader("raygeneration")]
void RayGen()
{
    RayDesc ray;
    ray.TMin = 0.01f;
    ray.TMax = 100000.f;
    ray.Origin = _WorldSpaceCameraPos;
    float4 pixelCoord = float4(DispatchRaysIndex().xy,1,1);
    ray.Direction = -normalize(mul(pixelCoord, _PixelCoordToViewDirWS).xyz);
    Hit payload = (Hit)0;
    payload.instanceID = 2;
    TraceRay(gRtScene, 0  /*rayFlags*/, 0xFF, 0 /* ray index*/, 1, 0, ray, payload);
    //_output[DispatchRaysIndex().xy] = float4(ray.Direction,1); 
 _output[DispatchRaysIndex().xy] = payload.instanceID >= 0 ? payload.hitDistance/10.0f: 0 ;  
}